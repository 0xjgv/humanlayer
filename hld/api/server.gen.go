// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for AgentSource.
const (
	AgentSourceGlobal AgentSource = "global"
	AgentSourceLocal  AgentSource = "local"
)

// Defines values for ApprovalStatus.
const (
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusDenied   ApprovalStatus = "denied"
	ApprovalStatusPending  ApprovalStatus = "pending"
)

// Defines values for ConversationEventApprovalStatus.
const (
	ConversationEventApprovalStatusApproved ConversationEventApprovalStatus = "approved"
	ConversationEventApprovalStatusDenied   ConversationEventApprovalStatus = "denied"
	ConversationEventApprovalStatusPending  ConversationEventApprovalStatus = "pending"
	ConversationEventApprovalStatusResolved ConversationEventApprovalStatus = "resolved"
)

// Defines values for ConversationEventEventType.
const (
	ConversationEventEventTypeMessage    ConversationEventEventType = "message"
	ConversationEventEventTypeSystem     ConversationEventEventType = "system"
	ConversationEventEventTypeThinking   ConversationEventEventType = "thinking"
	ConversationEventEventTypeToolCall   ConversationEventEventType = "tool_call"
	ConversationEventEventTypeToolResult ConversationEventEventType = "tool_result"
)

// Defines values for ConversationEventRole.
const (
	ConversationEventRoleAssistant ConversationEventRole = "assistant"
	ConversationEventRoleSystem    ConversationEventRole = "system"
	ConversationEventRoleUser      ConversationEventRole = "user"
)

// Defines values for CreateSessionRequestModel.
const (
	Haiku  CreateSessionRequestModel = "haiku"
	Opus   CreateSessionRequestModel = "opus"
	Sonnet CreateSessionRequestModel = "sonnet"
)

// Defines values for DecideApprovalRequestDecision.
const (
	Approve DecideApprovalRequestDecision = "approve"
	Deny    DecideApprovalRequestDecision = "deny"
)

// Defines values for EventType.
const (
	ApprovalResolved       EventType = "approval_resolved"
	ConversationUpdated    EventType = "conversation_updated"
	NewApproval            EventType = "new_approval"
	SessionSettingsChanged EventType = "session_settings_changed"
	SessionStatusChanged   EventType = "session_status_changed"
)

// Defines values for HealthResponseStatus.
const (
	Degraded HealthResponseStatus = "degraded"
	Ok       HealthResponseStatus = "ok"
)

// Defines values for InterruptSessionResponseDataStatus.
const (
	InterruptSessionResponseDataStatusInterrupting InterruptSessionResponseDataStatus = "interrupting"
)

// Defines values for SessionStatus.
const (
	SessionStatusCompleted    SessionStatus = "completed"
	SessionStatusDiscarded    SessionStatus = "discarded"
	SessionStatusDraft        SessionStatus = "draft"
	SessionStatusFailed       SessionStatus = "failed"
	SessionStatusInterrupted  SessionStatus = "interrupted"
	SessionStatusInterrupting SessionStatus = "interrupting"
	SessionStatusRunning      SessionStatus = "running"
	SessionStatusStarting     SessionStatus = "starting"
	SessionStatusWaitingInput SessionStatus = "waiting_input"
)

// Defines values for SlashCommandSource.
const (
	SlashCommandSourceGlobal SlashCommandSource = "global"
	SlashCommandSourceLocal  SlashCommandSource = "local"
)

// Defines values for ListSessionsParamsFilter.
const (
	Archived ListSessionsParamsFilter = "archived"
	Draft    ListSessionsParamsFilter = "draft"
	Normal   ListSessionsParamsFilter = "normal"
)

// Agent defines model for Agent.
type Agent struct {
	// Description Optional description from YAML frontmatter
	Description *string `json:"description,omitempty"`

	// MentionText Text to use for mentions
	MentionText string `json:"mentionText"`

	// Name Agent name from YAML frontmatter
	Name string `json:"name"`

	// Source Whether agent is from local or global directory
	Source AgentSource `json:"source"`
}

// AgentSource Whether agent is from local or global directory
type AgentSource string

// Approval defines model for Approval.
type Approval struct {
	// Comment Approver's comment
	Comment *string `json:"comment,omitempty"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Unique approval identifier
	Id string `json:"id"`

	// RespondedAt Response timestamp
	RespondedAt *time.Time `json:"responded_at"`

	// RunId Associated run ID
	RunId string `json:"run_id"`

	// SessionId Associated session ID
	SessionId string `json:"session_id"`

	// Status Current status of the approval
	Status ApprovalStatus `json:"status"`

	// ToolInput Tool input parameters
	ToolInput map[string]interface{} `json:"tool_input"`

	// ToolName Tool requesting approval
	ToolName string `json:"tool_name"`
}

// ApprovalResponse defines model for ApprovalResponse.
type ApprovalResponse struct {
	Data Approval `json:"data"`
}

// ApprovalStatus Current status of the approval
type ApprovalStatus string

// ApprovalsResponse defines model for ApprovalsResponse.
type ApprovalsResponse struct {
	Data []Approval `json:"data"`
}

// BulkArchiveRequest defines model for BulkArchiveRequest.
type BulkArchiveRequest struct {
	// Archived True to archive, false to unarchive
	Archived bool `json:"archived"`

	// SessionIds Sessions to archive/unarchive
	SessionIds []string `json:"session_ids"`
}

// BulkArchiveResponse defines model for BulkArchiveResponse.
type BulkArchiveResponse struct {
	Data struct {
		// FailedSessions Sessions that failed to update
		FailedSessions *[]string `json:"failed_sessions,omitempty"`
		Success        bool      `json:"success"`
	} `json:"data"`
}

// BulkRestoreDraftsRequest defines model for BulkRestoreDraftsRequest.
type BulkRestoreDraftsRequest struct {
	// SessionIds Draft sessions to restore from discarded status
	SessionIds []string `json:"session_ids"`
}

// BulkRestoreDraftsResponse defines model for BulkRestoreDraftsResponse.
type BulkRestoreDraftsResponse struct {
	Data struct {
		// FailedSessions Sessions that failed to restore
		FailedSessions *[]string `json:"failed_sessions,omitempty"`
		Success        bool      `json:"success"`
	} `json:"data"`
}

// ConfigResponse defines model for ConfigResponse.
type ConfigResponse struct {
	// ClaudeAvailable Whether Claude is available at the configured path
	ClaudeAvailable bool `json:"claude_available"`

	// ClaudeDetectedPath Automatically detected Claude path (may differ from configured)
	ClaudeDetectedPath *string `json:"claude_detected_path,omitempty"`

	// ClaudePath Currently configured Claude path
	ClaudePath string `json:"claude_path"`
}

// ContinueSessionRequest defines model for ContinueSessionRequest.
type ContinueSessionRequest struct {
	// AllowedTools Allowed tools list
	AllowedTools *[]string `json:"allowed_tools,omitempty"`

	// AppendSystemPrompt Append to system prompt
	AppendSystemPrompt *string `json:"append_system_prompt,omitempty"`

	// CustomInstructions Custom instructions
	CustomInstructions *string `json:"custom_instructions,omitempty"`

	// DisallowedTools Disallowed tools list
	DisallowedTools *[]string `json:"disallowed_tools,omitempty"`

	// MaxTurns Max conversation turns
	MaxTurns  *int       `json:"max_turns,omitempty"`
	McpConfig *MCPConfig `json:"mcp_config,omitempty"`

	// PermissionPromptTool MCP tool for permissions
	PermissionPromptTool *string `json:"permission_prompt_tool,omitempty"`

	// Query New query to continue with
	Query string `json:"query"`

	// SystemPrompt Override system prompt
	SystemPrompt *string `json:"system_prompt,omitempty"`
}

// ContinueSessionResponse defines model for ContinueSessionResponse.
type ContinueSessionResponse struct {
	Data struct {
		ClaudeSessionId string `json:"claude_session_id"`
		ParentSessionId string `json:"parent_session_id"`
		RunId           string `json:"run_id"`
		SessionId       string `json:"session_id"`
	} `json:"data"`
}

// ConversationEvent defines model for ConversationEvent.
type ConversationEvent struct {
	// ApprovalId Associated approval ID
	ApprovalId *string `json:"approval_id"`

	// ApprovalStatus Approval status for tool calls
	ApprovalStatus  *ConversationEventApprovalStatus `json:"approval_status"`
	ClaudeSessionId *string                          `json:"claude_session_id,omitempty"`

	// Content Message content
	Content   *string   `json:"content,omitempty"`
	CreatedAt time.Time `json:"created_at"`

	// EventType Type of conversation event
	EventType ConversationEventEventType `json:"event_type"`
	Id        int64                      `json:"id"`

	// IsCompleted Whether tool call has received result
	IsCompleted *bool `json:"is_completed,omitempty"`

	// ParentToolUseId Parent tool use ID for nested calls
	ParentToolUseId *string `json:"parent_tool_use_id,omitempty"`

	// Role Message role (for message events)
	Role *ConversationEventRole `json:"role,omitempty"`

	// Sequence Sequence number in conversation
	Sequence  int    `json:"sequence"`
	SessionId string `json:"session_id"`

	// ToolId Tool invocation ID (for tool events)
	ToolId *string `json:"tool_id,omitempty"`

	// ToolInputJson JSON string of tool input (for tool_call events)
	ToolInputJson *string `json:"tool_input_json,omitempty"`

	// ToolName Tool name (for tool_call events)
	ToolName *string `json:"tool_name,omitempty"`

	// ToolResultContent Tool result content
	ToolResultContent *string `json:"tool_result_content,omitempty"`

	// ToolResultForId Tool call ID this result is for
	ToolResultForId *string `json:"tool_result_for_id,omitempty"`
}

// ConversationEventApprovalStatus Approval status for tool calls
type ConversationEventApprovalStatus string

// ConversationEventEventType Type of conversation event
type ConversationEventEventType string

// ConversationEventRole Message role (for message events)
type ConversationEventRole string

// ConversationResponse defines model for ConversationResponse.
type ConversationResponse struct {
	Data []ConversationEvent `json:"data"`
}

// CreateApprovalRequest defines model for CreateApprovalRequest.
type CreateApprovalRequest struct {
	// RunId Run ID for the approval
	RunId string `json:"run_id"`

	// ToolInput Tool input parameters
	ToolInput map[string]interface{} `json:"tool_input"`

	// ToolName Name of the tool requesting approval
	ToolName string `json:"tool_name"`
}

// CreateApprovalResponse defines model for CreateApprovalResponse.
type CreateApprovalResponse struct {
	Data struct {
		// ApprovalId Created approval ID
		ApprovalId string `json:"approval_id"`
	} `json:"data"`
}

// CreateSessionRequest defines model for CreateSessionRequest.
type CreateSessionRequest struct {
	// AdditionalDirectories Additional directories Claude can access
	AdditionalDirectories *[]string `json:"additional_directories,omitempty"`

	// AllowedTools Whitelist of allowed tools
	AllowedTools *[]string `json:"allowed_tools,omitempty"`

	// AppendSystemPrompt Text to append to system prompt
	AppendSystemPrompt *string `json:"append_system_prompt,omitempty"`

	// AutoAcceptEdits Enable auto-accept for edit tools
	AutoAcceptEdits *bool `json:"auto_accept_edits,omitempty"`

	// CustomInstructions Custom instructions for Claude
	CustomInstructions *string `json:"custom_instructions,omitempty"`

	// DangerouslySkipPermissions Launch session with dangerously skip permissions enabled
	DangerouslySkipPermissions *bool `json:"dangerously_skip_permissions,omitempty"`

	// DangerouslySkipPermissionsTimeout Optional default timeout in milliseconds for dangerously skip permissions
	DangerouslySkipPermissionsTimeout *int64 `json:"dangerously_skip_permissions_timeout"`

	// DisallowedTools Blacklist of disallowed tools
	DisallowedTools *[]string `json:"disallowed_tools,omitempty"`

	// Draft Create session in draft state without launching Claude
	Draft *bool `json:"draft,omitempty"`

	// MaxTurns Maximum conversation turns
	MaxTurns  *int       `json:"max_turns,omitempty"`
	McpConfig *MCPConfig `json:"mcp_config,omitempty"`

	// Model Model to use for the session
	Model *CreateSessionRequestModel `json:"model,omitempty"`

	// PermissionPromptTool MCP tool for permission prompts
	PermissionPromptTool *string `json:"permission_prompt_tool,omitempty"`

	// ProxyApiKey API key for proxy authentication
	ProxyApiKey *string `json:"proxy_api_key,omitempty"`

	// ProxyBaseUrl Base URL for proxy service
	ProxyBaseUrl *string `json:"proxy_base_url,omitempty"`

	// ProxyEnabled Enable proxy routing for this session
	ProxyEnabled *bool `json:"proxy_enabled,omitempty"`

	// ProxyModelOverride Model identifier for proxy routing
	ProxyModelOverride *string `json:"proxy_model_override,omitempty"`

	// Query Initial query for Claude
	Query string `json:"query"`

	// SystemPrompt Override system prompt
	SystemPrompt *string `json:"system_prompt,omitempty"`

	// Title Optional title for the session
	Title *string `json:"title,omitempty"`

	// Verbose Enable verbose output
	Verbose *bool `json:"verbose,omitempty"`

	// WorkingDir Working directory for the session
	WorkingDir *string `json:"working_dir,omitempty"`
}

// CreateSessionRequestModel Model to use for the session
type CreateSessionRequestModel string

// CreateSessionResponse defines model for CreateSessionResponse.
type CreateSessionResponse struct {
	Data struct {
		// RunId Created run ID
		RunId string `json:"run_id"`

		// SessionId Created session ID
		SessionId string `json:"session_id"`
	} `json:"data"`
}

// DebugInfoResponse defines model for DebugInfoResponse.
type DebugInfoResponse struct {
	// CliCommand CLI command configured for MCP servers
	CliCommand string `json:"cli_command"`

	// LastModified Last modification time of the database file
	LastModified *time.Time `json:"last_modified,omitempty"`

	// Path Path to the SQLite database file
	Path string `json:"path"`

	// Size Size of the database file in bytes
	Size int64 `json:"size"`

	// Stats Database statistics
	Stats map[string]int64 `json:"stats"`

	// TableCount Number of tables in the database
	TableCount int `json:"table_count"`
}

// DecideApprovalRequest defines model for DecideApprovalRequest.
type DecideApprovalRequest struct {
	// Comment Optional comment (required for deny)
	Comment *string `json:"comment,omitempty"`

	// Decision Approval decision
	Decision DecideApprovalRequestDecision `json:"decision"`
}

// DecideApprovalRequestDecision Approval decision
type DecideApprovalRequestDecision string

// DecideApprovalResponse defines model for DecideApprovalResponse.
type DecideApprovalResponse struct {
	Data struct {
		// Error Error message if failed
		Error   *string `json:"error,omitempty"`
		Success bool    `json:"success"`
	} `json:"data"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Code Error code (e.g., HLD-101)
	Code string `json:"code"`

	// Details Additional error context
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error ErrorDetail `json:"error"`
}

// Event defines model for Event.
type Event struct {
	// Data Event-specific data
	Data map[string]interface{} `json:"data"`

	// Timestamp Event timestamp
	Timestamp time.Time `json:"timestamp"`

	// Type Type of system event
	Type EventType `json:"type"`
}

// EventType Type of system event
type EventType string

// FileMatch defines model for FileMatch.
type FileMatch struct {
	// DisplayPath Relative path for display (relative to first search path if applicable)
	DisplayPath string `json:"displayPath"`

	// IsDirectory True if this is a directory, false for files
	IsDirectory bool `json:"isDirectory"`

	// MatchedIndexes Character positions of matched query characters
	MatchedIndexes []int `json:"matchedIndexes"`

	// Path Absolute path to matched file or folder
	Path string `json:"path"`

	// Score Match quality score (higher is better)
	Score int `json:"score"`
}

// FileSnapshot defines model for FileSnapshot.
type FileSnapshot struct {
	// Content File content at snapshot time
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`

	// FilePath Path to the file
	FilePath string `json:"file_path"`

	// ToolId Tool invocation that created snapshot
	ToolId string `json:"tool_id"`
}

// FuzzySearchFilesRequest defines model for FuzzySearchFilesRequest.
type FuzzySearchFilesRequest struct {
	// FilesOnly Return only files, exclude directories
	FilesOnly *bool `json:"filesOnly,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `json:"limit,omitempty"`

	// Paths Directory paths to search within
	Paths []string `json:"paths"`

	// Query Fuzzy search pattern
	Query string `json:"query"`

	// RespectGitignore Filter out files/folders matching .gitignore patterns
	RespectGitignore *bool `json:"respectGitignore,omitempty"`
}

// FuzzySearchFilesResponse defines model for FuzzySearchFilesResponse.
type FuzzySearchFilesResponse struct {
	Metadata SearchMetadata `json:"metadata"`

	// Results Matched files/folders sorted by relevance
	Results []FileMatch `json:"results"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Dependencies *struct {
		Claude *struct {
			// Available Whether Claude binary is available
			Available bool `json:"available"`

			// Error Error message if Claude is not available
			Error *string `json:"error"`

			// Path Path to Claude binary if available
			Path *string `json:"path"`

			// Version Claude binary version (e.g., "1.0.110")
			Version *string `json:"version"`

			// VersionError Error message if version check failed
			VersionError *string `json:"version_error"`
		} `json:"claude,omitempty"`
	} `json:"dependencies,omitempty"`
	Status  HealthResponseStatus `json:"status"`
	Version string               `json:"version"`
}

// HealthResponseStatus defines model for HealthResponse.Status.
type HealthResponseStatus string

// InterruptSessionResponse defines model for InterruptSessionResponse.
type InterruptSessionResponse struct {
	Data struct {
		SessionId string                             `json:"session_id"`
		Status    InterruptSessionResponseDataStatus `json:"status"`
		Success   bool                               `json:"success"`
	} `json:"data"`
}

// InterruptSessionResponseDataStatus defines model for InterruptSessionResponse.Data.Status.
type InterruptSessionResponseDataStatus string

// MCPConfig defines model for MCPConfig.
type MCPConfig struct {
	// McpServers Map of server name to configuration
	McpServers *map[string]MCPServer `json:"mcpServers,omitempty"`
}

// MCPServer defines model for MCPServer.
type MCPServer struct {
	// Args Command arguments (for stdio servers)
	Args *[]string `json:"args,omitempty"`

	// Command Command to execute (for stdio servers)
	Command *string `json:"command,omitempty"`

	// Env Environment variables (for stdio servers)
	Env *map[string]string `json:"env,omitempty"`

	// Headers HTTP headers to include (for HTTP servers)
	Headers *map[string]string `json:"headers,omitempty"`

	// Type Server type (http for HTTP servers, omit for stdio)
	Type *string `json:"type,omitempty"`

	// Url HTTP endpoint URL (for HTTP servers)
	Url *string `json:"url,omitempty"`
}

// RecentPath defines model for RecentPath.
type RecentPath struct {
	// LastUsed Last time this path was used
	LastUsed time.Time `json:"last_used"`

	// Path Directory path
	Path string `json:"path"`

	// UsageCount Number of times used
	UsageCount int `json:"usage_count"`
}

// RecentPathsResponse defines model for RecentPathsResponse.
type RecentPathsResponse struct {
	Data []RecentPath `json:"data"`
}

// SearchMetadata defines model for SearchMetadata.
type SearchMetadata struct {
	// DurationMs Search duration in milliseconds
	DurationMs int `json:"durationMs"`

	// TimedOut True if search was terminated due to timeout
	TimedOut bool `json:"timedOut"`

	// TotalMatches Total matches found before applying limit
	TotalMatches int `json:"totalMatches"`

	// TotalScanned Total number of files/folders scanned
	TotalScanned int `json:"totalScanned"`
}

// Session defines model for Session.
type Session struct {
	// AdditionalDirectories Additional directories Claude can access
	AdditionalDirectories *[]string `json:"additional_directories,omitempty"`

	// Archived Whether session is archived
	Archived *bool `json:"archived,omitempty"`

	// AutoAcceptEdits Whether edit tools are auto-accepted
	AutoAcceptEdits *bool `json:"auto_accept_edits,omitempty"`

	// CacheCreationInputTokens Number of cache creation input tokens
	CacheCreationInputTokens *int `json:"cache_creation_input_tokens"`

	// CacheReadInputTokens Number of cache read input tokens
	CacheReadInputTokens *int `json:"cache_read_input_tokens"`

	// ClaudeSessionId Claude's internal session ID
	ClaudeSessionId *string `json:"claude_session_id,omitempty"`

	// CompletedAt Session completion timestamp
	CompletedAt *time.Time `json:"completed_at"`

	// ContextLimit Context window limit for the model
	ContextLimit *int `json:"context_limit"`

	// CostUsd Total cost in USD
	CostUsd *float32 `json:"cost_usd"`

	// CreatedAt Session creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DangerouslySkipPermissions When true, all tool calls are automatically approved without user consent
	DangerouslySkipPermissions *bool `json:"dangerously_skip_permissions,omitempty"`

	// DangerouslySkipPermissionsExpiresAt ISO timestamp when dangerously skip permissions mode expires (optional)
	DangerouslySkipPermissionsExpiresAt *time.Time `json:"dangerously_skip_permissions_expires_at"`

	// DurationMs Session duration in milliseconds
	DurationMs *int `json:"duration_ms"`

	// EditorState JSON blob of editor state for draft sessions
	EditorState *string `json:"editor_state"`

	// EffectiveContextTokens Total tokens counting toward context window limit
	EffectiveContextTokens *int `json:"effective_context_tokens"`

	// ErrorMessage Error message if session failed
	ErrorMessage *string `json:"error_message,omitempty"`

	// Id Unique session identifier
	Id string `json:"id"`

	// InputTokens Number of input tokens
	InputTokens *int `json:"input_tokens"`

	// LastActivityAt Last activity timestamp
	LastActivityAt time.Time `json:"last_activity_at"`

	// Model Model used for this session
	Model *string `json:"model,omitempty"`

	// ModelId Full model identifier
	ModelId *string `json:"model_id,omitempty"`

	// OutputTokens Number of output tokens
	OutputTokens *int `json:"output_tokens"`

	// ParentSessionId Parent session ID if this is a forked session
	ParentSessionId *string `json:"parent_session_id,omitempty"`

	// ProxyBaseUrl Base URL of the proxy server
	ProxyBaseUrl *string `json:"proxy_base_url,omitempty"`

	// ProxyEnabled Whether proxy is enabled for this session
	ProxyEnabled *bool `json:"proxy_enabled,omitempty"`

	// ProxyModelOverride Model to use with the proxy
	ProxyModelOverride *string `json:"proxy_model_override,omitempty"`

	// Query Initial query that started the session
	Query string `json:"query"`

	// RunId Unique run identifier
	RunId string `json:"run_id"`

	// Status Current status of the session
	Status SessionStatus `json:"status"`

	// Summary AI-generated summary of the session
	Summary *string `json:"summary,omitempty"`

	// Title User-editable session title
	Title *string `json:"title,omitempty"`

	// WorkingDir Working directory for the session
	WorkingDir *string `json:"working_dir,omitempty"`
}

// SessionResponse defines model for SessionResponse.
type SessionResponse struct {
	Data Session `json:"data"`
}

// SessionSearchResponse defines model for SessionSearchResponse.
type SessionSearchResponse struct {
	Data []Session `json:"data"`
}

// SessionStatus Current status of the session
type SessionStatus string

// SessionsResponse defines model for SessionsResponse.
type SessionsResponse struct {
	// Counts Session counts by category
	Counts *struct {
		// Archived Number of archived sessions
		Archived *int `json:"archived,omitempty"`

		// Draft Number of draft sessions
		Draft *int `json:"draft,omitempty"`

		// Normal Number of normal (non-archived, non-draft) sessions
		Normal *int `json:"normal,omitempty"`
	} `json:"counts,omitempty"`
	Data []Session `json:"data"`
}

// SlashCommand defines model for SlashCommand.
type SlashCommand struct {
	// Name Command name including slash prefix
	Name string `json:"name"`

	// Source Source of the command - local (repo) or global (user home)
	Source SlashCommandSource `json:"source"`
}

// SlashCommandSource Source of the command - local (repo) or global (user home)
type SlashCommandSource string

// SlashCommandsResponse defines model for SlashCommandsResponse.
type SlashCommandsResponse struct {
	Data []SlashCommand `json:"data"`
}

// SnapshotsResponse defines model for SnapshotsResponse.
type SnapshotsResponse struct {
	Data []FileSnapshot `json:"data"`
}

// UpdateConfigRequest defines model for UpdateConfigRequest.
type UpdateConfigRequest struct {
	// ClaudePath Path to Claude binary (empty string for auto-detection)
	ClaudePath *string `json:"claude_path"`
}

// UpdateSessionRequest defines model for UpdateSessionRequest.
type UpdateSessionRequest struct {
	// AdditionalDirectories Update additional directories Claude can access
	AdditionalDirectories *[]string `json:"additional_directories,omitempty"`

	// Archived Archive/unarchive the session
	Archived *bool `json:"archived,omitempty"`

	// AutoAcceptEdits Enable/disable auto-accept for edit tools
	AutoAcceptEdits *bool `json:"auto_accept_edits,omitempty"`

	// DangerouslySkipPermissions Enable or disable dangerously skip permissions mode
	DangerouslySkipPermissions *bool `json:"dangerously_skip_permissions,omitempty"`

	// DangerouslySkipPermissionsTimeoutMs Optional timeout in milliseconds for dangerously skip permissions mode
	DangerouslySkipPermissionsTimeoutMs *int64 `json:"dangerously_skip_permissions_timeout_ms"`

	// EditorState JSON blob of editor state for draft sessions
	EditorState *string `json:"editor_state,omitempty"`

	// Model Model to use (opus, sonnet, or empty for default)
	Model *string `json:"model,omitempty"`

	// ModelId Full model identifier
	ModelId *string `json:"model_id,omitempty"`

	// ProxyApiKey API key for proxy authentication
	ProxyApiKey *string `json:"proxy_api_key,omitempty"`

	// ProxyBaseUrl Base URL for proxy service
	ProxyBaseUrl *string `json:"proxy_base_url,omitempty"`

	// ProxyEnabled Enable proxy routing for this session
	ProxyEnabled *bool `json:"proxy_enabled,omitempty"`

	// ProxyModelOverride Model identifier for proxy routing
	ProxyModelOverride *string `json:"proxy_model_override,omitempty"`

	// Status Current status of the session
	Status *SessionStatus `json:"status,omitempty"`

	// Title Update session title
	Title *string `json:"title,omitempty"`

	// WorkingDir Update the working directory for the session
	WorkingDir *string `json:"working_dir,omitempty"`
}

// UpdateUserSettingsRequest defines model for UpdateUserSettingsRequest.
type UpdateUserSettingsRequest struct {
	// AdvancedProviders Enable or disable advanced provider options
	AdvancedProviders *bool `json:"advanced_providers,omitempty"`

	// OptInTelemetry Opt-in or opt-out of performance and error reporting
	OptInTelemetry *bool `json:"opt_in_telemetry,omitempty"`
}

// UserSettings defines model for UserSettings.
type UserSettings struct {
	// AdvancedProviders Enable advanced provider options like OpenRouter
	AdvancedProviders bool      `json:"advanced_providers"`
	CreatedAt         time.Time `json:"created_at"`

	// OptInTelemetry Opt-in for performance and error reporting
	OptInTelemetry *bool     `json:"opt_in_telemetry,omitempty"`
	UpdatedAt      time.Time `json:"updated_at"`
}

// UserSettingsResponse defines model for UserSettingsResponse.
type UserSettingsResponse struct {
	Data UserSettings `json:"data"`
}

// ApprovalId defines model for approvalId.
type ApprovalId = string

// SessionId defines model for sessionId.
type SessionId = string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// DiscoverAgentsJSONBody defines parameters for DiscoverAgents.
type DiscoverAgentsJSONBody struct {
	// WorkingDir Session working directory for local agent discovery
	WorkingDir string `json:"workingDir"`
}

// ListApprovalsParams defines parameters for ListApprovals.
type ListApprovalsParams struct {
	// SessionId Filter by session ID
	SessionId *string `form:"sessionId,omitempty" json:"sessionId,omitempty"`
}

// GetRecentPathsParams defines parameters for GetRecentPaths.
type GetRecentPathsParams struct {
	// Limit Maximum number of paths to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListSessionsParams defines parameters for ListSessions.
type ListSessionsParams struct {
	// LeavesOnly Return only leaf sessions (sessions with no children)
	LeavesOnly *bool `form:"leavesOnly,omitempty" json:"leavesOnly,omitempty"`

	// Filter Filter sessions by type
	Filter *ListSessionsParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// ListSessionsParamsFilter defines parameters for ListSessions.
type ListSessionsParamsFilter string

// SearchSessionsParams defines parameters for SearchSessions.
type SearchSessionsParams struct {
	// Query Search query for title matching (uses SQL LIKE)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// LaunchDraftSessionJSONBody defines parameters for LaunchDraftSession.
type LaunchDraftSessionJSONBody struct {
	// Prompt Initial prompt to send to Claude
	Prompt string `json:"prompt"`
}

// GetSlashCommandsParams defines parameters for GetSlashCommands.
type GetSlashCommandsParams struct {
	// WorkingDir Working directory to search for commands
	WorkingDir string `form:"working_dir" json:"working_dir"`

	// Query Fuzzy search query
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// DiscoverAgentsJSONRequestBody defines body for DiscoverAgents for application/json ContentType.
type DiscoverAgentsJSONRequestBody DiscoverAgentsJSONBody

// CreateApprovalJSONRequestBody defines body for CreateApproval for application/json ContentType.
type CreateApprovalJSONRequestBody = CreateApprovalRequest

// DecideApprovalJSONRequestBody defines body for DecideApproval for application/json ContentType.
type DecideApprovalJSONRequestBody = DecideApprovalRequest

// UpdateConfigJSONRequestBody defines body for UpdateConfig for application/json ContentType.
type UpdateConfigJSONRequestBody = UpdateConfigRequest

// FuzzySearchFilesJSONRequestBody defines body for FuzzySearchFiles for application/json ContentType.
type FuzzySearchFilesJSONRequestBody = FuzzySearchFilesRequest

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = CreateSessionRequest

// BulkArchiveSessionsJSONRequestBody defines body for BulkArchiveSessions for application/json ContentType.
type BulkArchiveSessionsJSONRequestBody = BulkArchiveRequest

// BulkRestoreDraftsJSONRequestBody defines body for BulkRestoreDrafts for application/json ContentType.
type BulkRestoreDraftsJSONRequestBody = BulkRestoreDraftsRequest

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody = UpdateSessionRequest

// ContinueSessionJSONRequestBody defines body for ContinueSession for application/json ContentType.
type ContinueSessionJSONRequestBody = ContinueSessionRequest

// LaunchDraftSessionJSONRequestBody defines body for LaunchDraftSession for application/json ContentType.
type LaunchDraftSessionJSONRequestBody LaunchDraftSessionJSONBody

// UpdateUserSettingsJSONRequestBody defines body for UpdateUserSettings for application/json ContentType.
type UpdateUserSettingsJSONRequestBody = UpdateUserSettingsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Discover available agents
	// (POST /agents/discover)
	DiscoverAgents(c *gin.Context)
	// List approval requests
	// (GET /approvals)
	ListApprovals(c *gin.Context, params ListApprovalsParams)
	// Create approval request
	// (POST /approvals)
	CreateApproval(c *gin.Context)
	// Get approval details
	// (GET /approvals/{id})
	GetApproval(c *gin.Context, id ApprovalId)
	// Decide on approval request
	// (POST /approvals/{id}/decide)
	DecideApproval(c *gin.Context, id ApprovalId)
	// Get daemon configuration
	// (GET /config)
	GetConfig(c *gin.Context)
	// Update daemon configuration
	// (PATCH /config)
	UpdateConfig(c *gin.Context)
	// Get debug information
	// (GET /debug-info)
	GetDebugInfo(c *gin.Context)
	// Fuzzy search for files and folders
	// (POST /fuzzy-search/files)
	FuzzySearchFiles(c *gin.Context)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get recent working directories
	// (GET /recent-paths)
	GetRecentPaths(c *gin.Context, params GetRecentPathsParams)
	// List sessions
	// (GET /sessions)
	ListSessions(c *gin.Context, params ListSessionsParams)
	// Launch a new session
	// (POST /sessions)
	CreateSession(c *gin.Context)
	// Bulk archive/unarchive sessions
	// (POST /sessions/archive)
	BulkArchiveSessions(c *gin.Context)
	// Restore multiple discarded draft sessions
	// (POST /sessions/restore)
	BulkRestoreDrafts(c *gin.Context)
	// Search sessions by title
	// (GET /sessions/search)
	SearchSessions(c *gin.Context, params SearchSessionsParams)
	// Get session details
	// (GET /sessions/{id})
	GetSession(c *gin.Context, id SessionId)
	// Update session settings
	// (PATCH /sessions/{id})
	UpdateSession(c *gin.Context, id SessionId)
	// Continue or fork a session
	// (POST /sessions/{id}/continue)
	ContinueSession(c *gin.Context, id SessionId)
	// Permanently delete an empty draft session
	// (DELETE /sessions/{id}/hard-delete-empty)
	HardDeleteEmptyDraftSession(c *gin.Context, id SessionId)
	// Interrupt a running session
	// (POST /sessions/{id}/interrupt)
	InterruptSession(c *gin.Context, id SessionId)
	// Delete a draft session
	// (DELETE /sessions/{id}/launch)
	DeleteDraftSession(c *gin.Context, id SessionId)
	// Launch a draft session
	// (POST /sessions/{id}/launch)
	LaunchDraftSession(c *gin.Context, id SessionId)
	// Get conversation messages
	// (GET /sessions/{id}/messages)
	GetSessionMessages(c *gin.Context, id SessionId)
	// Get file snapshots
	// (GET /sessions/{id}/snapshots)
	GetSessionSnapshots(c *gin.Context, id SessionId)
	// Get available slash commands
	// (GET /slash-commands)
	GetSlashCommands(c *gin.Context, params GetSlashCommandsParams)
	// Get user settings
	// (GET /user-settings)
	GetUserSettings(c *gin.Context)
	// Update user settings
	// (PATCH /user-settings)
	UpdateUserSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DiscoverAgents operation middleware
func (siw *ServerInterfaceWrapper) DiscoverAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DiscoverAgents(c)
}

// ListApprovals operation middleware
func (siw *ServerInterfaceWrapper) ListApprovals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApprovalsParams

	// ------------- Optional query parameter "sessionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sessionId", c.Request.URL.Query(), &params.SessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListApprovals(c, params)
}

// CreateApproval operation middleware
func (siw *ServerInterfaceWrapper) CreateApproval(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateApproval(c)
}

// GetApproval operation middleware
func (siw *ServerInterfaceWrapper) GetApproval(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ApprovalId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApproval(c, id)
}

// DecideApproval operation middleware
func (siw *ServerInterfaceWrapper) DecideApproval(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ApprovalId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DecideApproval(c, id)
}

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConfig(c)
}

// UpdateConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateConfig(c)
}

// GetDebugInfo operation middleware
func (siw *ServerInterfaceWrapper) GetDebugInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDebugInfo(c)
}

// FuzzySearchFiles operation middleware
func (siw *ServerInterfaceWrapper) FuzzySearchFiles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FuzzySearchFiles(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetRecentPaths operation middleware
func (siw *ServerInterfaceWrapper) GetRecentPaths(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecentPathsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecentPaths(c, params)
}

// ListSessions operation middleware
func (siw *ServerInterfaceWrapper) ListSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSessionsParams

	// ------------- Optional query parameter "leavesOnly" -------------

	err = runtime.BindQueryParameter("form", true, false, "leavesOnly", c.Request.URL.Query(), &params.LeavesOnly)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter leavesOnly: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSessions(c, params)
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSession(c)
}

// BulkArchiveSessions operation middleware
func (siw *ServerInterfaceWrapper) BulkArchiveSessions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkArchiveSessions(c)
}

// BulkRestoreDrafts operation middleware
func (siw *ServerInterfaceWrapper) BulkRestoreDrafts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkRestoreDrafts(c)
}

// SearchSessions operation middleware
func (siw *ServerInterfaceWrapper) SearchSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchSessionsParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchSessions(c, params)
}

// GetSession operation middleware
func (siw *ServerInterfaceWrapper) GetSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSession(c, id)
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSession(c, id)
}

// ContinueSession operation middleware
func (siw *ServerInterfaceWrapper) ContinueSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ContinueSession(c, id)
}

// HardDeleteEmptyDraftSession operation middleware
func (siw *ServerInterfaceWrapper) HardDeleteEmptyDraftSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HardDeleteEmptyDraftSession(c, id)
}

// InterruptSession operation middleware
func (siw *ServerInterfaceWrapper) InterruptSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InterruptSession(c, id)
}

// DeleteDraftSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteDraftSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDraftSession(c, id)
}

// LaunchDraftSession operation middleware
func (siw *ServerInterfaceWrapper) LaunchDraftSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LaunchDraftSession(c, id)
}

// GetSessionMessages operation middleware
func (siw *ServerInterfaceWrapper) GetSessionMessages(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessionMessages(c, id)
}

// GetSessionSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSessionSnapshots(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessionSnapshots(c, id)
}

// GetSlashCommands operation middleware
func (siw *ServerInterfaceWrapper) GetSlashCommands(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSlashCommandsParams

	// ------------- Required query parameter "working_dir" -------------

	if paramValue := c.Query("working_dir"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument working_dir is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "working_dir", c.Request.URL.Query(), &params.WorkingDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter working_dir: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSlashCommands(c, params)
}

// GetUserSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUserSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserSettings(c)
}

// UpdateUserSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/agents/discover", wrapper.DiscoverAgents)
	router.GET(options.BaseURL+"/approvals", wrapper.ListApprovals)
	router.POST(options.BaseURL+"/approvals", wrapper.CreateApproval)
	router.GET(options.BaseURL+"/approvals/:id", wrapper.GetApproval)
	router.POST(options.BaseURL+"/approvals/:id/decide", wrapper.DecideApproval)
	router.GET(options.BaseURL+"/config", wrapper.GetConfig)
	router.PATCH(options.BaseURL+"/config", wrapper.UpdateConfig)
	router.GET(options.BaseURL+"/debug-info", wrapper.GetDebugInfo)
	router.POST(options.BaseURL+"/fuzzy-search/files", wrapper.FuzzySearchFiles)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/recent-paths", wrapper.GetRecentPaths)
	router.GET(options.BaseURL+"/sessions", wrapper.ListSessions)
	router.POST(options.BaseURL+"/sessions", wrapper.CreateSession)
	router.POST(options.BaseURL+"/sessions/archive", wrapper.BulkArchiveSessions)
	router.POST(options.BaseURL+"/sessions/restore", wrapper.BulkRestoreDrafts)
	router.GET(options.BaseURL+"/sessions/search", wrapper.SearchSessions)
	router.GET(options.BaseURL+"/sessions/:id", wrapper.GetSession)
	router.PATCH(options.BaseURL+"/sessions/:id", wrapper.UpdateSession)
	router.POST(options.BaseURL+"/sessions/:id/continue", wrapper.ContinueSession)
	router.DELETE(options.BaseURL+"/sessions/:id/hard-delete-empty", wrapper.HardDeleteEmptyDraftSession)
	router.POST(options.BaseURL+"/sessions/:id/interrupt", wrapper.InterruptSession)
	router.DELETE(options.BaseURL+"/sessions/:id/launch", wrapper.DeleteDraftSession)
	router.POST(options.BaseURL+"/sessions/:id/launch", wrapper.LaunchDraftSession)
	router.GET(options.BaseURL+"/sessions/:id/messages", wrapper.GetSessionMessages)
	router.GET(options.BaseURL+"/sessions/:id/snapshots", wrapper.GetSessionSnapshots)
	router.GET(options.BaseURL+"/slash-commands", wrapper.GetSlashCommands)
	router.GET(options.BaseURL+"/user-settings", wrapper.GetUserSettings)
	router.PATCH(options.BaseURL+"/user-settings", wrapper.UpdateUserSettings)
}

type BadRequestJSONResponse ErrorResponse

type InternalErrorJSONResponse ErrorResponse

type NotFoundJSONResponse ErrorResponse

type DiscoverAgentsRequestObject struct {
	Body *DiscoverAgentsJSONRequestBody
}

type DiscoverAgentsResponseObject interface {
	VisitDiscoverAgentsResponse(w http.ResponseWriter) error
}

type DiscoverAgents200JSONResponse struct {
	Agents []Agent `json:"agents"`
}

func (response DiscoverAgents200JSONResponse) VisitDiscoverAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DiscoverAgents400JSONResponse struct{ BadRequestJSONResponse }

func (response DiscoverAgents400JSONResponse) VisitDiscoverAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DiscoverAgents500JSONResponse struct{ InternalErrorJSONResponse }

func (response DiscoverAgents500JSONResponse) VisitDiscoverAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListApprovalsRequestObject struct {
	Params ListApprovalsParams
}

type ListApprovalsResponseObject interface {
	VisitListApprovalsResponse(w http.ResponseWriter) error
}

type ListApprovals200JSONResponse ApprovalsResponse

func (response ListApprovals200JSONResponse) VisitListApprovalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListApprovals500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListApprovals500JSONResponse) VisitListApprovalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateApprovalRequestObject struct {
	Body *CreateApprovalJSONRequestBody
}

type CreateApprovalResponseObject interface {
	VisitCreateApprovalResponse(w http.ResponseWriter) error
}

type CreateApproval201JSONResponse CreateApprovalResponse

func (response CreateApproval201JSONResponse) VisitCreateApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateApproval400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateApproval400JSONResponse) VisitCreateApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateApproval500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateApproval500JSONResponse) VisitCreateApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApprovalRequestObject struct {
	Id ApprovalId `json:"id"`
}

type GetApprovalResponseObject interface {
	VisitGetApprovalResponse(w http.ResponseWriter) error
}

type GetApproval200JSONResponse ApprovalResponse

func (response GetApproval200JSONResponse) VisitGetApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApproval404JSONResponse struct{ NotFoundJSONResponse }

func (response GetApproval404JSONResponse) VisitGetApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApproval500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetApproval500JSONResponse) VisitGetApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DecideApprovalRequestObject struct {
	Id   ApprovalId `json:"id"`
	Body *DecideApprovalJSONRequestBody
}

type DecideApprovalResponseObject interface {
	VisitDecideApprovalResponse(w http.ResponseWriter) error
}

type DecideApproval200JSONResponse DecideApprovalResponse

func (response DecideApproval200JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DecideApproval400JSONResponse ErrorResponse

func (response DecideApproval400JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DecideApproval404JSONResponse struct{ NotFoundJSONResponse }

func (response DecideApproval404JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DecideApproval500JSONResponse struct{ InternalErrorJSONResponse }

func (response DecideApproval500JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigRequestObject struct {
}

type GetConfigResponseObject interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse ConfigResponse

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetConfig500JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfigRequestObject struct {
	Body *UpdateConfigJSONRequestBody
}

type UpdateConfigResponseObject interface {
	VisitUpdateConfigResponse(w http.ResponseWriter) error
}

type UpdateConfig200JSONResponse ConfigResponse

func (response UpdateConfig200JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateConfig400JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateConfig500JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDebugInfoRequestObject struct {
}

type GetDebugInfoResponseObject interface {
	VisitGetDebugInfoResponse(w http.ResponseWriter) error
}

type GetDebugInfo200JSONResponse DebugInfoResponse

func (response GetDebugInfo200JSONResponse) VisitGetDebugInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FuzzySearchFilesRequestObject struct {
	Body *FuzzySearchFilesJSONRequestBody
}

type FuzzySearchFilesResponseObject interface {
	VisitFuzzySearchFilesResponse(w http.ResponseWriter) error
}

type FuzzySearchFiles200JSONResponse FuzzySearchFilesResponse

func (response FuzzySearchFiles200JSONResponse) VisitFuzzySearchFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FuzzySearchFiles400JSONResponse struct{ BadRequestJSONResponse }

func (response FuzzySearchFiles400JSONResponse) VisitFuzzySearchFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FuzzySearchFiles500JSONResponse struct{ InternalErrorJSONResponse }

func (response FuzzySearchFiles500JSONResponse) VisitFuzzySearchFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentPathsRequestObject struct {
	Params GetRecentPathsParams
}

type GetRecentPathsResponseObject interface {
	VisitGetRecentPathsResponse(w http.ResponseWriter) error
}

type GetRecentPaths200JSONResponse RecentPathsResponse

func (response GetRecentPaths200JSONResponse) VisitGetRecentPathsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentPaths500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetRecentPaths500JSONResponse) VisitGetRecentPathsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListSessionsRequestObject struct {
	Params ListSessionsParams
}

type ListSessionsResponseObject interface {
	VisitListSessionsResponse(w http.ResponseWriter) error
}

type ListSessions200JSONResponse SessionsResponse

func (response ListSessions200JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSessions500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListSessions500JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSessionRequestObject struct {
	Body *CreateSessionJSONRequestBody
}

type CreateSessionResponseObject interface {
	VisitCreateSessionResponse(w http.ResponseWriter) error
}

type CreateSession201JSONResponse CreateSessionResponse

func (response CreateSession201JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSession400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateSession400JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateSession500JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessionsRequestObject struct {
	Body *BulkArchiveSessionsJSONRequestBody
}

type BulkArchiveSessionsResponseObject interface {
	VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error
}

type BulkArchiveSessions200JSONResponse BulkArchiveResponse

func (response BulkArchiveSessions200JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessions207JSONResponse BulkArchiveResponse

func (response BulkArchiveSessions207JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(207)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessions400JSONResponse struct{ BadRequestJSONResponse }

func (response BulkArchiveSessions400JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessions500JSONResponse struct{ InternalErrorJSONResponse }

func (response BulkArchiveSessions500JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type BulkRestoreDraftsRequestObject struct {
	Body *BulkRestoreDraftsJSONRequestBody
}

type BulkRestoreDraftsResponseObject interface {
	VisitBulkRestoreDraftsResponse(w http.ResponseWriter) error
}

type BulkRestoreDrafts200JSONResponse BulkRestoreDraftsResponse

func (response BulkRestoreDrafts200JSONResponse) VisitBulkRestoreDraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BulkRestoreDrafts207JSONResponse BulkRestoreDraftsResponse

func (response BulkRestoreDrafts207JSONResponse) VisitBulkRestoreDraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(207)

	return json.NewEncoder(w).Encode(response)
}

type BulkRestoreDrafts400JSONResponse struct{ BadRequestJSONResponse }

func (response BulkRestoreDrafts400JSONResponse) VisitBulkRestoreDraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkRestoreDrafts500JSONResponse struct{ InternalErrorJSONResponse }

func (response BulkRestoreDrafts500JSONResponse) VisitBulkRestoreDraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchSessionsRequestObject struct {
	Params SearchSessionsParams
}

type SearchSessionsResponseObject interface {
	VisitSearchSessionsResponse(w http.ResponseWriter) error
}

type SearchSessions200JSONResponse SessionSearchResponse

func (response SearchSessions200JSONResponse) VisitSearchSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchSessions400JSONResponse struct{ BadRequestJSONResponse }

func (response SearchSessions400JSONResponse) VisitSearchSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchSessions500JSONResponse struct{ InternalErrorJSONResponse }

func (response SearchSessions500JSONResponse) VisitSearchSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type GetSessionResponseObject interface {
	VisitGetSessionResponse(w http.ResponseWriter) error
}

type GetSession200JSONResponse SessionResponse

func (response GetSession200JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSession404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSession404JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSession500JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionRequestObject struct {
	Id   SessionId `json:"id"`
	Body *UpdateSessionJSONRequestBody
}

type UpdateSessionResponseObject interface {
	VisitUpdateSessionResponse(w http.ResponseWriter) error
}

type UpdateSession200JSONResponse SessionResponse

func (response UpdateSession200JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession400JSONResponse ErrorResponse

func (response UpdateSession400JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession404JSONResponse struct{ NotFoundJSONResponse }

func (response UpdateSession404JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateSession500JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ContinueSessionRequestObject struct {
	Id   SessionId `json:"id"`
	Body *ContinueSessionJSONRequestBody
}

type ContinueSessionResponseObject interface {
	VisitContinueSessionResponse(w http.ResponseWriter) error
}

type ContinueSession201JSONResponse ContinueSessionResponse

func (response ContinueSession201JSONResponse) VisitContinueSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ContinueSession404JSONResponse struct{ NotFoundJSONResponse }

func (response ContinueSession404JSONResponse) VisitContinueSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ContinueSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response ContinueSession500JSONResponse) VisitContinueSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HardDeleteEmptyDraftSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type HardDeleteEmptyDraftSessionResponseObject interface {
	VisitHardDeleteEmptyDraftSessionResponse(w http.ResponseWriter) error
}

type HardDeleteEmptyDraftSession204Response struct {
}

func (response HardDeleteEmptyDraftSession204Response) VisitHardDeleteEmptyDraftSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type HardDeleteEmptyDraftSession400JSONResponse ErrorResponse

func (response HardDeleteEmptyDraftSession400JSONResponse) VisitHardDeleteEmptyDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HardDeleteEmptyDraftSession404JSONResponse struct{ NotFoundJSONResponse }

func (response HardDeleteEmptyDraftSession404JSONResponse) VisitHardDeleteEmptyDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type HardDeleteEmptyDraftSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response HardDeleteEmptyDraftSession500JSONResponse) VisitHardDeleteEmptyDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type InterruptSessionResponseObject interface {
	VisitInterruptSessionResponse(w http.ResponseWriter) error
}

type InterruptSession200JSONResponse InterruptSessionResponse

func (response InterruptSession200JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSession400JSONResponse ErrorResponse

func (response InterruptSession400JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSession404JSONResponse struct{ NotFoundJSONResponse }

func (response InterruptSession404JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response InterruptSession500JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDraftSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type DeleteDraftSessionResponseObject interface {
	VisitDeleteDraftSessionResponse(w http.ResponseWriter) error
}

type DeleteDraftSession204Response struct {
}

func (response DeleteDraftSession204Response) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDraftSession400JSONResponse ErrorResponse

func (response DeleteDraftSession400JSONResponse) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDraftSession404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteDraftSession404JSONResponse) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDraftSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteDraftSession500JSONResponse) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSessionRequestObject struct {
	Id   SessionId `json:"id"`
	Body *LaunchDraftSessionJSONRequestBody
}

type LaunchDraftSessionResponseObject interface {
	VisitLaunchDraftSessionResponse(w http.ResponseWriter) error
}

type LaunchDraftSession200JSONResponse SessionResponse

func (response LaunchDraftSession200JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSession400JSONResponse ErrorResponse

func (response LaunchDraftSession400JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSession404JSONResponse struct{ NotFoundJSONResponse }

func (response LaunchDraftSession404JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response LaunchDraftSession500JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionMessagesRequestObject struct {
	Id SessionId `json:"id"`
}

type GetSessionMessagesResponseObject interface {
	VisitGetSessionMessagesResponse(w http.ResponseWriter) error
}

type GetSessionMessages200JSONResponse ConversationResponse

func (response GetSessionMessages200JSONResponse) VisitGetSessionMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionMessages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSessionMessages404JSONResponse) VisitGetSessionMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionMessages500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSessionMessages500JSONResponse) VisitGetSessionMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionSnapshotsRequestObject struct {
	Id SessionId `json:"id"`
}

type GetSessionSnapshotsResponseObject interface {
	VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error
}

type GetSessionSnapshots200JSONResponse SnapshotsResponse

func (response GetSessionSnapshots200JSONResponse) VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionSnapshots404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSessionSnapshots404JSONResponse) VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionSnapshots500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSessionSnapshots500JSONResponse) VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSlashCommandsRequestObject struct {
	Params GetSlashCommandsParams
}

type GetSlashCommandsResponseObject interface {
	VisitGetSlashCommandsResponse(w http.ResponseWriter) error
}

type GetSlashCommands200JSONResponse SlashCommandsResponse

func (response GetSlashCommands200JSONResponse) VisitGetSlashCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSlashCommands400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSlashCommands400JSONResponse) VisitGetSlashCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSlashCommands500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSlashCommands500JSONResponse) VisitGetSlashCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSettingsRequestObject struct {
}

type GetUserSettingsResponseObject interface {
	VisitGetUserSettingsResponse(w http.ResponseWriter) error
}

type GetUserSettings200JSONResponse UserSettingsResponse

func (response GetUserSettings200JSONResponse) VisitGetUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSettings500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetUserSettings500JSONResponse) VisitGetUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSettingsRequestObject struct {
	Body *UpdateUserSettingsJSONRequestBody
}

type UpdateUserSettingsResponseObject interface {
	VisitUpdateUserSettingsResponse(w http.ResponseWriter) error
}

type UpdateUserSettings200JSONResponse UserSettingsResponse

func (response UpdateUserSettings200JSONResponse) VisitUpdateUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSettings400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateUserSettings400JSONResponse) VisitUpdateUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSettings500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateUserSettings500JSONResponse) VisitUpdateUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Discover available agents
	// (POST /agents/discover)
	DiscoverAgents(ctx context.Context, request DiscoverAgentsRequestObject) (DiscoverAgentsResponseObject, error)
	// List approval requests
	// (GET /approvals)
	ListApprovals(ctx context.Context, request ListApprovalsRequestObject) (ListApprovalsResponseObject, error)
	// Create approval request
	// (POST /approvals)
	CreateApproval(ctx context.Context, request CreateApprovalRequestObject) (CreateApprovalResponseObject, error)
	// Get approval details
	// (GET /approvals/{id})
	GetApproval(ctx context.Context, request GetApprovalRequestObject) (GetApprovalResponseObject, error)
	// Decide on approval request
	// (POST /approvals/{id}/decide)
	DecideApproval(ctx context.Context, request DecideApprovalRequestObject) (DecideApprovalResponseObject, error)
	// Get daemon configuration
	// (GET /config)
	GetConfig(ctx context.Context, request GetConfigRequestObject) (GetConfigResponseObject, error)
	// Update daemon configuration
	// (PATCH /config)
	UpdateConfig(ctx context.Context, request UpdateConfigRequestObject) (UpdateConfigResponseObject, error)
	// Get debug information
	// (GET /debug-info)
	GetDebugInfo(ctx context.Context, request GetDebugInfoRequestObject) (GetDebugInfoResponseObject, error)
	// Fuzzy search for files and folders
	// (POST /fuzzy-search/files)
	FuzzySearchFiles(ctx context.Context, request FuzzySearchFilesRequestObject) (FuzzySearchFilesResponseObject, error)
	// Health check
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get recent working directories
	// (GET /recent-paths)
	GetRecentPaths(ctx context.Context, request GetRecentPathsRequestObject) (GetRecentPathsResponseObject, error)
	// List sessions
	// (GET /sessions)
	ListSessions(ctx context.Context, request ListSessionsRequestObject) (ListSessionsResponseObject, error)
	// Launch a new session
	// (POST /sessions)
	CreateSession(ctx context.Context, request CreateSessionRequestObject) (CreateSessionResponseObject, error)
	// Bulk archive/unarchive sessions
	// (POST /sessions/archive)
	BulkArchiveSessions(ctx context.Context, request BulkArchiveSessionsRequestObject) (BulkArchiveSessionsResponseObject, error)
	// Restore multiple discarded draft sessions
	// (POST /sessions/restore)
	BulkRestoreDrafts(ctx context.Context, request BulkRestoreDraftsRequestObject) (BulkRestoreDraftsResponseObject, error)
	// Search sessions by title
	// (GET /sessions/search)
	SearchSessions(ctx context.Context, request SearchSessionsRequestObject) (SearchSessionsResponseObject, error)
	// Get session details
	// (GET /sessions/{id})
	GetSession(ctx context.Context, request GetSessionRequestObject) (GetSessionResponseObject, error)
	// Update session settings
	// (PATCH /sessions/{id})
	UpdateSession(ctx context.Context, request UpdateSessionRequestObject) (UpdateSessionResponseObject, error)
	// Continue or fork a session
	// (POST /sessions/{id}/continue)
	ContinueSession(ctx context.Context, request ContinueSessionRequestObject) (ContinueSessionResponseObject, error)
	// Permanently delete an empty draft session
	// (DELETE /sessions/{id}/hard-delete-empty)
	HardDeleteEmptyDraftSession(ctx context.Context, request HardDeleteEmptyDraftSessionRequestObject) (HardDeleteEmptyDraftSessionResponseObject, error)
	// Interrupt a running session
	// (POST /sessions/{id}/interrupt)
	InterruptSession(ctx context.Context, request InterruptSessionRequestObject) (InterruptSessionResponseObject, error)
	// Delete a draft session
	// (DELETE /sessions/{id}/launch)
	DeleteDraftSession(ctx context.Context, request DeleteDraftSessionRequestObject) (DeleteDraftSessionResponseObject, error)
	// Launch a draft session
	// (POST /sessions/{id}/launch)
	LaunchDraftSession(ctx context.Context, request LaunchDraftSessionRequestObject) (LaunchDraftSessionResponseObject, error)
	// Get conversation messages
	// (GET /sessions/{id}/messages)
	GetSessionMessages(ctx context.Context, request GetSessionMessagesRequestObject) (GetSessionMessagesResponseObject, error)
	// Get file snapshots
	// (GET /sessions/{id}/snapshots)
	GetSessionSnapshots(ctx context.Context, request GetSessionSnapshotsRequestObject) (GetSessionSnapshotsResponseObject, error)
	// Get available slash commands
	// (GET /slash-commands)
	GetSlashCommands(ctx context.Context, request GetSlashCommandsRequestObject) (GetSlashCommandsResponseObject, error)
	// Get user settings
	// (GET /user-settings)
	GetUserSettings(ctx context.Context, request GetUserSettingsRequestObject) (GetUserSettingsResponseObject, error)
	// Update user settings
	// (PATCH /user-settings)
	UpdateUserSettings(ctx context.Context, request UpdateUserSettingsRequestObject) (UpdateUserSettingsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DiscoverAgents operation middleware
func (sh *strictHandler) DiscoverAgents(ctx *gin.Context) {
	var request DiscoverAgentsRequestObject

	var body DiscoverAgentsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DiscoverAgents(ctx, request.(DiscoverAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DiscoverAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DiscoverAgentsResponseObject); ok {
		if err := validResponse.VisitDiscoverAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListApprovals operation middleware
func (sh *strictHandler) ListApprovals(ctx *gin.Context, params ListApprovalsParams) {
	var request ListApprovalsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListApprovals(ctx, request.(ListApprovalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListApprovals")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListApprovalsResponseObject); ok {
		if err := validResponse.VisitListApprovalsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateApproval operation middleware
func (sh *strictHandler) CreateApproval(ctx *gin.Context) {
	var request CreateApprovalRequestObject

	var body CreateApprovalJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateApproval(ctx, request.(CreateApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateApproval")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateApprovalResponseObject); ok {
		if err := validResponse.VisitCreateApprovalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApproval operation middleware
func (sh *strictHandler) GetApproval(ctx *gin.Context, id ApprovalId) {
	var request GetApprovalRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApproval(ctx, request.(GetApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApproval")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApprovalResponseObject); ok {
		if err := validResponse.VisitGetApprovalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DecideApproval operation middleware
func (sh *strictHandler) DecideApproval(ctx *gin.Context, id ApprovalId) {
	var request DecideApprovalRequestObject

	request.Id = id

	var body DecideApprovalJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DecideApproval(ctx, request.(DecideApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DecideApproval")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DecideApprovalResponseObject); ok {
		if err := validResponse.VisitDecideApprovalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConfig operation middleware
func (sh *strictHandler) GetConfig(ctx *gin.Context) {
	var request GetConfigRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfig(ctx, request.(GetConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConfigResponseObject); ok {
		if err := validResponse.VisitGetConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateConfig operation middleware
func (sh *strictHandler) UpdateConfig(ctx *gin.Context) {
	var request UpdateConfigRequestObject

	var body UpdateConfigJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateConfig(ctx, request.(UpdateConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateConfigResponseObject); ok {
		if err := validResponse.VisitUpdateConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDebugInfo operation middleware
func (sh *strictHandler) GetDebugInfo(ctx *gin.Context) {
	var request GetDebugInfoRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDebugInfo(ctx, request.(GetDebugInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDebugInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetDebugInfoResponseObject); ok {
		if err := validResponse.VisitGetDebugInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// FuzzySearchFiles operation middleware
func (sh *strictHandler) FuzzySearchFiles(ctx *gin.Context) {
	var request FuzzySearchFilesRequestObject

	var body FuzzySearchFilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FuzzySearchFiles(ctx, request.(FuzzySearchFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FuzzySearchFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(FuzzySearchFilesResponseObject); ok {
		if err := validResponse.VisitFuzzySearchFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *gin.Context) {
	var request GetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecentPaths operation middleware
func (sh *strictHandler) GetRecentPaths(ctx *gin.Context, params GetRecentPathsParams) {
	var request GetRecentPathsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecentPaths(ctx, request.(GetRecentPathsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecentPaths")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecentPathsResponseObject); ok {
		if err := validResponse.VisitGetRecentPathsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSessions operation middleware
func (sh *strictHandler) ListSessions(ctx *gin.Context, params ListSessionsParams) {
	var request ListSessionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListSessions(ctx, request.(ListSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListSessionsResponseObject); ok {
		if err := validResponse.VisitListSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSession operation middleware
func (sh *strictHandler) CreateSession(ctx *gin.Context) {
	var request CreateSessionRequestObject

	var body CreateSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSession(ctx, request.(CreateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSessionResponseObject); ok {
		if err := validResponse.VisitCreateSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkArchiveSessions operation middleware
func (sh *strictHandler) BulkArchiveSessions(ctx *gin.Context) {
	var request BulkArchiveSessionsRequestObject

	var body BulkArchiveSessionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BulkArchiveSessions(ctx, request.(BulkArchiveSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkArchiveSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BulkArchiveSessionsResponseObject); ok {
		if err := validResponse.VisitBulkArchiveSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkRestoreDrafts operation middleware
func (sh *strictHandler) BulkRestoreDrafts(ctx *gin.Context) {
	var request BulkRestoreDraftsRequestObject

	var body BulkRestoreDraftsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BulkRestoreDrafts(ctx, request.(BulkRestoreDraftsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkRestoreDrafts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BulkRestoreDraftsResponseObject); ok {
		if err := validResponse.VisitBulkRestoreDraftsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchSessions operation middleware
func (sh *strictHandler) SearchSessions(ctx *gin.Context, params SearchSessionsParams) {
	var request SearchSessionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchSessions(ctx, request.(SearchSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchSessionsResponseObject); ok {
		if err := validResponse.VisitSearchSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSession operation middleware
func (sh *strictHandler) GetSession(ctx *gin.Context, id SessionId) {
	var request GetSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSession(ctx, request.(GetSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionResponseObject); ok {
		if err := validResponse.VisitGetSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSession operation middleware
func (sh *strictHandler) UpdateSession(ctx *gin.Context, id SessionId) {
	var request UpdateSessionRequestObject

	request.Id = id

	var body UpdateSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSession(ctx, request.(UpdateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSessionResponseObject); ok {
		if err := validResponse.VisitUpdateSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ContinueSession operation middleware
func (sh *strictHandler) ContinueSession(ctx *gin.Context, id SessionId) {
	var request ContinueSessionRequestObject

	request.Id = id

	var body ContinueSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ContinueSession(ctx, request.(ContinueSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ContinueSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ContinueSessionResponseObject); ok {
		if err := validResponse.VisitContinueSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HardDeleteEmptyDraftSession operation middleware
func (sh *strictHandler) HardDeleteEmptyDraftSession(ctx *gin.Context, id SessionId) {
	var request HardDeleteEmptyDraftSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HardDeleteEmptyDraftSession(ctx, request.(HardDeleteEmptyDraftSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HardDeleteEmptyDraftSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HardDeleteEmptyDraftSessionResponseObject); ok {
		if err := validResponse.VisitHardDeleteEmptyDraftSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// InterruptSession operation middleware
func (sh *strictHandler) InterruptSession(ctx *gin.Context, id SessionId) {
	var request InterruptSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InterruptSession(ctx, request.(InterruptSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InterruptSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(InterruptSessionResponseObject); ok {
		if err := validResponse.VisitInterruptSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDraftSession operation middleware
func (sh *strictHandler) DeleteDraftSession(ctx *gin.Context, id SessionId) {
	var request DeleteDraftSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDraftSession(ctx, request.(DeleteDraftSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDraftSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteDraftSessionResponseObject); ok {
		if err := validResponse.VisitDeleteDraftSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LaunchDraftSession operation middleware
func (sh *strictHandler) LaunchDraftSession(ctx *gin.Context, id SessionId) {
	var request LaunchDraftSessionRequestObject

	request.Id = id

	var body LaunchDraftSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LaunchDraftSession(ctx, request.(LaunchDraftSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LaunchDraftSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LaunchDraftSessionResponseObject); ok {
		if err := validResponse.VisitLaunchDraftSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessionMessages operation middleware
func (sh *strictHandler) GetSessionMessages(ctx *gin.Context, id SessionId) {
	var request GetSessionMessagesRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionMessages(ctx, request.(GetSessionMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionMessagesResponseObject); ok {
		if err := validResponse.VisitGetSessionMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessionSnapshots operation middleware
func (sh *strictHandler) GetSessionSnapshots(ctx *gin.Context, id SessionId) {
	var request GetSessionSnapshotsRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionSnapshots(ctx, request.(GetSessionSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSessionSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSlashCommands operation middleware
func (sh *strictHandler) GetSlashCommands(ctx *gin.Context, params GetSlashCommandsParams) {
	var request GetSlashCommandsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSlashCommands(ctx, request.(GetSlashCommandsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSlashCommands")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSlashCommandsResponseObject); ok {
		if err := validResponse.VisitGetSlashCommandsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserSettings operation middleware
func (sh *strictHandler) GetUserSettings(ctx *gin.Context) {
	var request GetUserSettingsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSettings(ctx, request.(GetUserSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserSettingsResponseObject); ok {
		if err := validResponse.VisitGetUserSettingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserSettings operation middleware
func (sh *strictHandler) UpdateUserSettings(ctx *gin.Context) {
	var request UpdateUserSettingsRequestObject

	var body UpdateUserSettingsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserSettings(ctx, request.(UpdateUserSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserSettingsResponseObject); ok {
		if err := validResponse.VisitUpdateUserSettingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
